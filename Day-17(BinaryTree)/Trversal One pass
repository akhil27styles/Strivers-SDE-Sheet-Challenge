import java.io.*;
import java.lang.*;
import java.util.*;
class Node {
     int val;
      Node left;
      Node right;
      Node() {}
      Node(int val) { this.val = val; }
      Node(int val, Node left, Node right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }

class Pair {
    Node node; 
    int num; 
    Pair(Node _node, int _num) {
        num = _num; 
        node = _node; 
    }
}
class Main {
Node root;  
   Main(int key){
       root=new Node(key);
   }
   Main(){
       root=null;
   }

    public static List<Integer> postorderTraversal(Node root) {
        Stack<Pair> st = new Stack<Pair>(); 
        st.push(new Pair(root, 1)); 
        List<Integer> pre = new ArrayList<>();
        List<Integer> in = new ArrayList<>();
        List<Integer> post = new ArrayList<>();
        if(root == null) return post;

        while(!st.isEmpty()) {
            Pair it = st.pop(); 

            // this is part of pre
            // increment 1 to 2 
            // push the left side of the tree
            if(it.num == 1) {
                pre.add(it.node.val); 
                it.num++; 
                st.push(it); 
                
                if(it.node.left != null) {
                    st.push(new Pair(it.node.left, 1)); 
                }
            }

            // this is a part of in 
            // increment 2 to 3 
            // push right 
            else if(it.num == 2) {
                in.add(it.node.val); 
                it.num++; 
                st.push(it); 

                if(it.node.right != null) {
                    st.push(new Pair(it.node.right, 1)); 
                }
            }
            // don't push it back again 
            else {
                post.add(it.node.val); 
            }
        } 

        return pre; 

    }
    void postorderTraversal(){
       List<Integer>ans=postorderTraversal(root);
       System.out.println(ans);
    }
    public static void main (String[] args) {
      Main t=new Main();
	  t.root=new Node(1);
	  t.root.left=new Node(2);
	  t.root.right=new Node(3);
	  t.root.left.left=new Node(4);
	  t.root.left.right=new Node(5);
	  t.root.right.left=new Node(6);
	  t.root.right.right=new Node(7);
	  t.postorderTraversal();
	}
}
